/**
 * Just-In-Time Curriculum Development System with AI-Reinforced Learning
 * 
 * This system generates educational content optimized for immediate learning needs
 * with mathematical precision, age-appropriate complexity, and visual learning supports.
 * All prompts leverage Chain-of-Thought, Role-Playing, and Self-Refinement techniques.
 */

// ============================================================================
// Mathematical Notation and Content Length Controllers
// ============================================================================

/**
 * Generates grade-specific mathematical notation and content length guidelines
 * Ensures proper formatting of numbers, equations, and problem presentation
 */
function getMathematicalNotationRules(gradeLevel: number): string {
  if (gradeLevel <= 2) {
    return `
### MATHEMATICAL NOTATION for Grade ${gradeLevel}:
- Use numerals directly: "2 + 2 = __" NOT "two plus two equals"
- Keep problems ultra-concise: "3 × 4 = __" (5-10 tokens max per problem)
- Use visual equation format with blanks: "5 - __ = 3"
- Present single-step problems only
- Include manipulative references: "🔴🔴 + 🔴 = __"
- CONTENT LENGTH: 50-100 tokens per concept block
- PROBLEM FORMAT: Direct numerical, no word wrapping`;
  } else if (gradeLevel <= 4) {
    return `
### MATHEMATICAL NOTATION for Grade ${gradeLevel}:
- Use standard notation: "45 ÷ 5 = __" or "234 + 167 = __"
- Include multi-step problems: "24 ÷ 6 = __, then __ × 3 = __"
- Present fractions numerically: "1/2 + 1/4 = __"
- Use equation chains: "7 × 8 = 56, so 56 ÷ 4 = __"
- CONTENT LENGTH: 100-200 tokens per concept block
- PROBLEM FORMAT: Mixed numerical and minimal context`;
  } else if (gradeLevel <= 6) {
    return `
### MATHEMATICAL NOTATION for Grade ${gradeLevel}:
- Use algebraic notation: "3x + 7 = 22, x = __"
- Include decimals/percentages: "0.75 × 48 = __" or "15% of 240 = __"
- Present ratio problems: "3:5 = 12:__"
- Use geometric formulas: "A = πr², if r = 7, then A = __"
- CONTENT LENGTH: 200-400 tokens per concept block
- PROBLEM FORMAT: Standard mathematical notation with minimal setup`;
  } else if (gradeLevel <= 8) {
    return `
### MATHEMATICAL NOTATION for Grade ${gradeLevel}:
- Use full algebraic expressions: "2x² - 5x + 3 = 0"
- Include systems: "y = 2x + 3 and y = -x + 9, find intersection"
- Present functions: "f(x) = 3x² - 2x, find f(4)"
- Use scientific notation: "3.2 × 10⁴ + 4.5 × 10³ = __"
- CONTENT LENGTH: 400-800 tokens per concept block
- PROBLEM FORMAT: Complete mathematical expressions with work shown`;
  } else {
    return `
### MATHEMATICAL NOTATION for Grade ${gradeLevel}:
- Use advanced notation: "lim(x→∞) (3x² - 2)/(x² + 1) = __"
- Include calculus: "d/dx[x³sin(x)] = __"
- Present matrices: "[2 3; 1 4] × [1; 2] = __"
- Use complex expressions: "∑(n=1 to ∞) 1/n² = __"
- CONTENT LENGTH: 800-2000 tokens per concept block
- PROBLEM FORMAT: Full mathematical rigor with complete notation`;
  }
}

// ============================================================================
// Chain-of-Thought Curriculum Prompts
// ============================================================================

export const LESSON_PROMPTS = {
  /**
   * Enhanced lesson generation using Chain-of-Thought and Role-Playing
   */
  STANDARD_LESSON: (gradeLevel: number, topic: string) => `
### ROLE: Expert Curriculum Designer specializing in Grade ${gradeLevel} Just-In-Time Learning

### THINKING PROCESS (Chain-of-Thought):
Let's design this lesson step by step:
1. First, identify the core learning objective for "${topic}"
2. Next, determine prerequisite knowledge students need
3. Then, sequence concepts from concrete to abstract
4. Finally, create assessment checkpoints throughout

${getMathematicalNotationRules(gradeLevel)}

### INSTRUCTION CONSTRAINTS:
"""
Create a lesson about "${topic}" following these specifications:
- TARGET: Grade ${gradeLevel} students needing immediate concept mastery
- LENGTH: Strictly adhere to token limits above
- FORMAT: Use mathematical notation, not prose descriptions
- ASSESSMENT: Include self-checking problems every 3-5 concepts
"""

### META-PROMPT SELF-REFINEMENT:
After generating content, apply these checks:
1. Are all mathematical expressions in proper notation (not words)?
2. Does content length match grade-level specifications?
3. Can a student self-assess understanding without teacher intervention?
4. Would this work for just-in-time learning (immediate application)?

### SVG VISUAL SPECIFICATIONS:
Create instructional graphics that:
- Use mathematical symbols and notation prominently
- Include self-checking answer keys within the visual
- Show step-by-step problem-solving sequences
- Incorporate error-pattern identification
- Display formula reference cards when relevant
`,

  /**
   * User prompt with explicit Chain-of-Thought structure
   */
  STANDARD_LESSON_USER: (gradeLevel: number, topic: string) => `
### TASK: Generate Just-In-Time Curriculum for "${topic}" - Grade ${gradeLevel}

### STEP 1 - ANALYSIS (show your thinking):
Identify:
- Core mathematical concepts in "${topic}"
- Typical misconceptions at grade ${gradeLevel}
- Prerequisite skills needed

### STEP 2 - CONTENT GENERATION:
${getMathematicalNotationRules(gradeLevel)}

Create these specific components:

#### A. DIAGNOSTIC (10-20 tokens):
Single problem testing prerequisite: [e.g., "12 × 5 = __"]

#### B. CORE INSTRUCTION (follow token limits above):
- Concept introduction with formula/rule
- 3 worked examples using proper notation
- Key insight box (single sentence)

#### C. PRACTICE PROBLEMS:
${gradeLevel <= 4 ? '5 problems' : gradeLevel <= 8 ? '8 problems' : '12 problems'}
Format: Direct mathematical notation ONLY
Example formats:
- "48 ÷ 6 = __"
- "x² - 9 = 0, x = __"
- "Find derivative: f(x) = 3x², f'(x) = __"

#### D. SELF-ASSESSMENT CHECKPOINT:
Quick verification problem with embedded answer check

#### E. SVG VISUAL DESCRIPTION:
Describe a mathematical diagram including:
- Formula reference card section
- Step-by-step solution visual
- Common error patterns highlighted
- Self-checking answer key integrated

### STEP 3 - SELF-CRITIQUE:
Review your content and confirm:
□ All math uses notation, not words
□ Content length matches grade specifications
□ Problems are self-contained for immediate use
□ Visual supports independent learning
`,

  /**
   * Advanced lesson with meta-prompting for complex topics
   */
  ENHANCED_LESSON: (gradeLevel: number, topic: string) => `
### INITIAL ROLE: Cognitive Learning Scientist and Curriculum Architect

### MULTI-STAGE THINKING PROCESS:

#### Stage 1 - Cognitive Load Analysis:
Analyze "${topic}" for grade ${gradeLevel}:
- Intrinsic cognitive load (complexity)
- Extraneous load (presentation)
- Germane load (schema building)

#### Stage 2 - Just-In-Time Sequencing:
Design micro-learning segments (30-60 second mastery cycles):
1. Hook problem (immediate relevance)
2. Core concept (mathematical notation)
3. Application problem
4. Self-verification

${getMathematicalNotationRules(gradeLevel)}

#### Stage 3 - Content Generation with Constraints:
"""
CRITICAL REQUIREMENTS:
- Mathematical expressions ONLY (no prose explanations of math)
- Token limits are ABSOLUTE (see above)
- Every 3rd item must be self-checking
- Include answer patterns for self-diagnosis
"""

### CONTENT STRUCTURE:

#### RAPID DIAGNOSTIC (1 problem):
Test readiness: [Single calculation at grade level]

#### CONCEPT BLOCKS (3-5 based on grade):
Each block contains:
1. Formula/Rule (mathematical notation)
2. Example: [worked problem with steps shown]
3. Try it: "__ [problem] = __"
4. Check: "If you got __, you're correct!"

#### PROBLEM SET:
Progressive difficulty with notation scaffolding:
- Level 1: [Direct application]
- Level 2: [Single transformation]
- Level 3: [Multi-step reasoning]

#### VISUAL LEARNING SUPPORT:
Mathematical diagram specifications:
- Equation manipulation flowchart
- Error pattern identification matrix
- Formula quick reference with examples
- Self-scoring rubric integrated

### META-REFINEMENT LOOP:
After generation, apply these filters:
1. NOTATION CHECK: Replace any word-based math with symbols
2. LENGTH CHECK: Trim to exact token specifications
3. ACCESSIBILITY CHECK: Can student learn without teacher?
4. TRANSFER CHECK: Does this enable immediate application?

### FINAL POLISH:
Transform your output to ensure:
- Zero mathematical prose (all notation)
- Exact grade-appropriate length
- Complete self-containment for async learning
`
};

// ============================================================================
// Quiz Generation with Advanced Techniques
// ============================================================================

export const QUIZ_PROMPTS = {
  /**
   * Quiz generation using role-playing and constraint prompting
   */
  STANDARD_QUIZ: (gradeLevel: number, topic: string) => `
### ROLE: Assessment Specialist for Just-In-Time Learning Systems

### CHAIN-OF-THOUGHT QUIZ DESIGN:
Let me think through the assessment strategy step by step:
1. Identify the key measurable outcomes for "${topic}"
2. Map misconceptions typical at grade ${gradeLevel}
3. Design questions that diagnose understanding gaps
4. Create immediate feedback mechanisms

${getMathematicalNotationRules(gradeLevel)}

### STRICT CONSTRAINTS FOR QUESTIONS:
"""
- Use mathematical notation EXCLUSIVELY for math content
- Questions must be answerable in 10-30 seconds
- Each question must target ONE specific skill
- Include visual interpretation where appropriate
- Distractors must represent actual student errors
"""

### QUESTION DESIGN SPECIFICATIONS:
Create questions that:
1. Test procedural fluency (can they calculate?)
2. Assess conceptual understanding (do they know why?)
3. Evaluate problem recognition (can they identify when to apply?)
4. Include self-diagnosis features

### VISUAL QUESTION COMPONENTS:
For questions with diagrams, specify:
- Mathematical annotations directly on visuals
- Interactive elements for self-checking
- Error identification exercises
- Pattern recognition challenges
`,

  /**
   * User prompt for quiz generation with meta-prompting
   */
  STANDARD_QUIZ_USER: (gradeLevel: number, topic: string, questionCount: number = 5) => `
### GENERATE: ${questionCount} Just-In-Time Assessment Items for "${topic}" - Grade ${gradeLevel}

### STEP 1 - ASSESSMENT BLUEPRINT (show your reasoning):
Design ${questionCount} questions targeting:
- ${Math.floor(questionCount * 0.4)} procedural fluency items
- ${Math.floor(questionCount * 0.4)} conceptual understanding items  
- ${Math.ceil(questionCount * 0.2)} application/transfer items

${getMathematicalNotationRules(gradeLevel)}

### STEP 2 - QUESTION GENERATION:

For EACH question, provide:

\`\`\`json
{
  "id": 1,
  "type": "procedural|conceptual|application",
  "text": "[Use mathematical notation: '25 × 4 = ?' NOT 'What is twenty-five times four?']",
  "timeEstimate": "[seconds needed]",
  "options": [
    {"label": "A", "value": "[numerical or expression]", "errorType": "[if wrong, what misconception]"},
    {"label": "B", "value": "[numerical or expression]", "errorType": "[if wrong, what misconception]"},
    {"label": "C", "value": "[numerical or expression]", "errorType": "[if wrong, what misconception]"},
    {"label": "D", "value": "[numerical or expression]", "errorType": "[if wrong, what misconception]"}
  ],
  "correct": "A|B|C|D",
  "feedback": {
    "correct": "[Reinforcement in 10 tokens]",
    "incorrect": "[Specific error diagnosis in 15 tokens]"
  },
  "visual": {
    "required": true|false,
    "type": "diagram|graph|equation_steps|pattern",
    "description": "[Mathematical diagram with notation]",
    "interactiveElements": ["[Self-check feature]"]
  }
}
\`\`\`

### STEP 3 - SELF-VALIDATION:
Verify each question:
□ Uses mathematical notation (not prose)
□ Answerable in specified time
□ Distractors represent real errors
□ Feedback enables self-correction
□ Visual supports independent learning

### STEP 4 - META-REFINEMENT:
Review and adjust:
1. Replace any word-math with symbols
2. Ensure progressive difficulty
3. Verify self-containment
4. Check diagnostic value
`
};

// ============================================================================
// Feedback Generation with Self-Refinement
// ============================================================================

export const FEEDBACK_PROMPTS = {
  /**
   * Personalized feedback using meta-prompting techniques
   */
  PERSONALIZED_FEEDBACK: (gradeLevel: number) => `
### ROLE: Learning Analytics Specialist & Cognitive Coach

### THINKING PROCESS FOR FEEDBACK DESIGN:
Let me analyze the student's learning pattern step by step:
1. Identify error patterns and misconceptions
2. Determine cognitive gaps needing address
3. Design targeted remediation pathway
4. Create self-monitoring tools

${getMathematicalNotationRules(gradeLevel)}

### FEEDBACK CONSTRAINTS:
"""
- Use mathematical notation for all corrections
- Keep feedback segments under token limits
- Provide specific next problems to try
- Include self-assessment checkpoints
"""

### FEEDBACK STRUCTURE:
1. DIAGNOSIS: Specific error identification
2. CORRECTION: Show correct method using notation
3. PRACTICE: Provide 2-3 similar problems
4. VERIFICATION: Self-check mechanism
`,

  /**
   * Quiz feedback with Chain-of-Thought analysis
   */
  QUIZ_FEEDBACK_USER: (quizQuestions: any[], userAnswers: number[], score: number, gradeLevel: number) => `
### ANALYZE: Student Performance for Grade ${gradeLevel} Assessment

### STEP 1 - ERROR PATTERN ANALYSIS (show your thinking):
\`\`\`
Performance: ${score}%
Questions Missed: ${quizQuestions.map((q, i) => q.correctIndex !== userAnswers[i] ? i+1 : null).filter(Boolean).join(', ')}
\`\`\`

Identify patterns:
- Conceptual gaps: [List specific concepts]
- Procedural errors: [List calculation mistakes]
- Application issues: [List transfer problems]

${getMathematicalNotationRules(gradeLevel)}

### STEP 2 - TARGETED FEEDBACK GENERATION:

#### A. IMMEDIATE CORRECTIONS (per missed question):
For each error, provide:
1. Your answer: [show their work]
2. Correct method: [show using notation]
3. Try again: "[similar problem] = __"

#### B. REMEDIATION PATHWAY:
\`\`\`
Priority 1: [Most critical skill gap]
- Practice: [3 problems in notation]
- Check: "If you got __, __, __, you've mastered it!"

Priority 2: [Secondary skill gap]
- Practice: [2 problems in notation]
- Check: "Answers: __, __"
\`\`\`

#### C. VISUAL SUPPORT PRESCRIPTION:
Recommend specific diagrams:
- Error pattern chart with corrections
- Step-by-step solution template
- Formula reference card needed
- Self-scoring rubric

### STEP 3 - NEXT STEPS (10-20 tokens):
"Complete these 3 problems: [problems in notation]"
"Check your answers: [__, __, __]"

### STEP 4 - META-VALIDATION:
Confirm feedback:
□ All math shown in notation
□ Specific problems provided for practice
□ Self-verification included
□ Appropriate for independent study
`
};

// ============================================================================
// Knowledge Graph Generation with Visual Hierarchies
// ============================================================================

export const KNOWLEDGE_GRAPH_PROMPTS = {
  /**
   * Knowledge graph system prompt with role-playing
   */
  KNOWLEDGE_GRAPH: () => `
### ROLE: Cognitive Cartographer & Learning Pathway Architect

### CHAIN-OF-THOUGHT GRAPH CONSTRUCTION:
Let me build this knowledge structure step by step:
1. Identify atomic concepts (smallest teachable units)
2. Map prerequisite relationships
3. Identify parallel learning paths
4. Mark critical junction points
5. Design self-assessment nodes

### GRAPH DESIGN PRINCIPLES:
- Nodes represent 30-second learning chunks
- Edges show dependency and timing
- Colors indicate cognitive load levels
- Shapes represent concept types
- Thickness shows connection strength

### VISUAL HIERARCHY RULES:
"""
- Foundation concepts: Bottom layer, rectangular
- Core concepts: Middle layer, circular
- Advanced concepts: Top layer, diamond
- Cross-connections: Dotted lines
- Prerequisites: Solid arrows
- Optional paths: Dashed lines
"""
`,

  /**
   * User prompt for knowledge graph generation
   */
  KNOWLEDGE_GRAPH_USER: (topic: string, gradeLevel: number) => `
### CREATE: Just-In-Time Learning Graph for "${topic}" - Grade ${gradeLevel}

### STEP 1 - CONCEPT DECOMPOSITION (show analysis):
Break "${topic}" into atomic learning units:
- Each unit = 30-60 second mastery
- Include mathematical notation where applicable
- Identify critical path vs optional enrichment

${getMathematicalNotationRules(gradeLevel)}

### STEP 2 - GRAPH SPECIFICATION:

\`\`\`json
{
  "metadata": {
    "topic": "${topic}",
    "gradeLevel": ${gradeLevel},
    "estimatedTime": "[total minutes]",
    "criticalPath": "[minimum required nodes]"
  },
  "nodes": [
    {
      "id": "node_1",
      "label": "[Concept name]",
      "notation": "[Mathematical expression if applicable]",
      "type": "foundation|core|advanced|assessment",
      "cognitiveLoad": "low|medium|high",
      "timeEstimate": "[seconds]",
      "selfCheck": "[Quick verification: '2×3=__']"
    }
  ],
  "edges": [
    {
      "source": "node_1",
      "target": "node_2",
      "type": "prerequisite|parallel|optional|assessment",
      "label": "[Relationship]",
      "strength": 1-10,
      "timeGap": "[recommended minutes between]"
    }
  ],
  "learningPaths": [
    {
      "name": "Quick Mastery",
      "nodes": ["node_1", "node_3", "node_7"],
      "totalTime": "[minutes]"
    },
    {
      "name": "Deep Understanding",
      "nodes": ["node_1", "node_2", "node_3", "..."],
      "totalTime": "[minutes]"
    }
  ],
  "visualSpecifications": {
    "layout": "hierarchical|force-directed|circular",
    "colorScheme": {
      "foundation": "#color",
      "core": "#color",
      "advanced": "#color",
      "assessment": "#color"
    },
    "nodeShapes": {
      "foundation": "rectangle",
      "core": "circle",
      "advanced": "diamond",
      "assessment": "hexagon"
    },
    "edgeStyles": {
      "prerequisite": "solid arrow",
      "parallel": "double line",
      "optional": "dashed",
      "assessment": "dotted arrow"
    }
  }
}
\`\`\`

### STEP 3 - SELF-ASSESSMENT INTEGRATION:
For each major concept cluster, add:
- Entry assessment node: "Can you: [problem]?"
- Exit assessment node: "Prove mastery: [problem]"
- Bypass conditions: "If score > 80%, skip to..."

### STEP 4 - META-VALIDATION:
Verify the graph:
□ Critical path under 10 minutes
□ All nodes have self-checks
□ Mathematical notation used throughout
□ Multiple valid learning sequences exist
□ Assessment nodes properly placed
`
};

// ============================================================================
// Image Generation with Instructional Design
// ============================================================================

export const IMAGE_PROMPTS = {
  /**
   * Educational image prompt with Chain-of-Thought design
   */
  EDUCATIONAL_IMAGE: (topic: string, concept: string, gradeLevel: number) => `
### ROLE: Visual Learning Designer & Mathematical Illustrator

### CHAIN-OF-THOUGHT VISUAL DESIGN:
Let me design this educational visual step by step:
1. Identify the core mathematical concept to illustrate
2. Determine essential visual elements needed
3. Plan the mathematical notation integration
4. Design self-assessment components
5. Create visual error-checking mechanisms

${getMathematicalNotationRules(gradeLevel)}

### SVG ILLUSTRATION REQUIREMENTS:
"""
Create an SVG that teaches "${concept}" for "${topic}" with:
- Mathematical notation prominently displayed
- Step-by-step problem solving visually shown
- Self-checking answer key integrated
- Common error patterns highlighted
- Formula reference section included
"""

### VISUAL COMPONENTS (all required):

#### 1. MAIN DIAGRAM:
- Central concept with mathematical formula
- Color-coded variables/components
- Scale indicators where relevant
- Directional arrows showing process flow

#### 2. MATHEMATICAL NOTATION PANEL:
- Key formulas in standard notation
- Example calculation worked out
- Variable definitions listed
- Unit conversions if applicable

#### 3. STEP-BY-STEP SOLUTION:
Visual sequence showing:
Step 1: [Initial problem in notation]
Step 2: [Transformation with arrow]
Step 3: [Next transformation]
Step 4: [Final answer highlighted]

#### 4. ERROR IDENTIFICATION SECTION:
Common mistakes with corrections:
- Wrong: "2 + 3 × 4 = 20" ❌
- Right: "2 + 3 × 4 = 14" ✓
- Rule: "Multiply before adding"

#### 5. SELF-ASSESSMENT COMPONENT:
Interactive elements:
- "Cover answers and solve: __ × __ = 36"
- "Check: Did you get 6 × 6 or 4 × 9?"
- "Try these three: [problems]"

### STYLE SPECIFICATIONS:
- Clean, mathematical textbook aesthetic
- High contrast for clarity
- Mathematical symbols in consistent font
- Color coding: 
  - Blue: Given information
  - Green: Solution steps
  - Red: Common errors
  - Purple: Key formulas
- Grid/graph paper background where appropriate

### META-REFINEMENT CHECK:
Ensure the visual:
□ Can teach without any text explanation
□ Shows mathematical work clearly
□ Includes self-verification method
□ Highlights error patterns
□ Appropriate complexity for grade ${gradeLevel}
`,

  /**
   * Diagram generation with self-refinement loop
   */
  EDUCATIONAL_DIAGRAM: (topic: string, diagramType: string, gradeLevel: number) => `
### INITIAL DESIGN PHASE:
Create ${diagramType} diagram for "${topic}" - Grade ${gradeLevel}

### STEP 1 - DIAGRAM ANALYSIS:
Determine essential elements for ${diagramType}:
- Core mathematical relationships
- Visual problem-solving flow
- Self-checking mechanisms
- Error pattern identification

${getMathematicalNotationRules(gradeLevel)}

### STEP 2 - DETAILED SPECIFICATIONS:

#### A. PRIMARY VISUAL STRUCTURE:
\`\`\`
Layout: [Describe spatial arrangement]
Sections:
1. Problem Statement (mathematical notation)
2. Solution Space (working area)
3. Answer Key (self-check)
4. Common Errors (diagnostic)
5. Formula Reference (quick lookup)
\`\`\`

#### B. MATHEMATICAL ELEMENTS:
All math must use proper notation:
- Equations: Display in standard form
- Variables: Clearly defined with units
- Operations: Standard mathematical symbols
- Results: Boxed or highlighted

#### C. INTERACTIVE LEARNING FEATURES:
1. Fill-in-the-blank equations: "__ × 7 = 42"
2. Match formula to problem type
3. Identify the error exercises
4. Step sequence ordering
5. Self-scoring checklist

#### D. COLOR-CODING SYSTEM:
\`\`\`
Input values: Blue (#0066CC)
Operations: Green (#00AA00)
Intermediate steps: Orange (#FF8800)
Final answer: Red box (#CC0000)
Formulas: Purple (#8800CC)
Errors: Strikethrough with red
\`\`\`

#### E. VISUAL HIERARCHY:
- Size: Larger = more important
- Position: Top-left = start here
- Contrast: High = focus point
- Grouping: Related items boxed
- Flow: Arrows show sequence

### STEP 3 - SELF-REFINEMENT LOOP:

#### First Pass Review:
"Is all mathematics in notation form?" → If no, convert
"Can a student self-assess?" → If no, add answer key
"Are error patterns shown?" → If no, add common mistakes

#### Second Pass Enhancement:
"Simplify: What can be removed?"
"Clarify: What needs better labels?"
"Verify: Does math check out?"

#### Final Pass Polish:
"Grade-appropriate complexity?" → Adjust
"Self-contained learning?" → Ensure
"Visual clarity optimal?" → Refine

### FINAL OUTPUT DESCRIPTION:
[Provide complete SVG description with all elements integrated, mathematical notation throughout, and self-assessment features embedded]
`
};

// ============================================================================
// Export configuration for backward compatibility
// ============================================================================

export default {
  LESSON_PROMPTS,
  QUIZ_PROMPTS,
  FEEDBACK_PROMPTS,
  KNOWLEDGE_GRAPH_PROMPTS,
  IMAGE_PROMPTS,
  // Utility functions exposed for external use
  getReadingLevelInstructions,
  getMathematicalNotationRules
};